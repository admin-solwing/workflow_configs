name: Pre-Validate Inputs

on:
  workflow_call:
    inputs:
      client:
        required: true
        type: string
      target-env:
        type: string
      target-app-env:
        type: string
      service_version:
        type: string
      odoo_base_tag:
        type: string  
    outputs:
      env-options:
        description: "List of valid environments"
        value: ${{ jobs.pre-validate.outputs.env-options }}
      app-env-options:
        description: "List of valid target environments"
        value: ${{ jobs.pre-validate.outputs.app-env-options }}
      clients-options:
        description: "List of valid clients"
        value: ${{ jobs.pre-validate.outputs.clients-options }}
      versions-options:
        description: "List of supported versions"
        value: ${{ jobs.pre-validate.outputs.supported-versions-options }}
      odoo-base-tag-options:
        description: "List of valid odoo base tags"
        value: ${{ jobs.pre-validate.outputs.odoo-base-tag-options }}

jobs:
  pre-validate:
    runs-on: ubuntu-latest
    outputs:
      env-options: ${{ steps.read-envs.outputs.environments }}
      app-env-options: ${{ steps.read-envs.outputs.app-environments }}
      clients-options: ${{ steps.read-clients.outputs.clients }}
      supported-versions-options: ${{ steps.read-supported-versions.outputs.supported_versions }}
      odoo-base-tag-options: ${{ steps.read-odoo_base_tags.outputs.odoo_base_tags }}
    steps:
      - name: Checkout workflow_configs repo
        uses: actions/checkout@v4
        with:
          repository: ashkan-farivarmoheb/workflow_configs
          path: workflow_configs

      - name: Read environments
        id: read-envs
        run: echo "environments=$(jq -c . workflow_configs/environments.json)" >> $GITHUB_OUTPUT

      - name: Read app environments
        id: read-app-envs
        run: echo "app_environments=$(jq -c . workflow_configs/app_environments.json)" >> $GITHUB_OUTPUT

      - name: Read clients
        id: read-clients
        run: echo "clients=$(jq -c . workflow_configs/clients.json)" >> $GITHUB_OUTPUT

      - name: Read supported versions
        id: read-supported-versions
        run: echo "supported_versions=$(jq -c . workflow_configs/supported_versions.json)" >> $GITHUB_OUTPUT

      - name: Read supported versions
        id: read-odoo_base_tags
        run: echo "odoo_base_tags=$(jq -c . workflow_configs/odoo_base_tags.json)" >> $GITHUB_OUTPUT

      - name: Validate target-app-env
        if: ${{ steps.read-app-envs.outputs.app_environments != null }}
        run: |
          VALID_APP_ENVS='${{ steps.read-app-envs.outputs.app_environments }}'
          if ! echo "$VALID_APP_ENVS" | jq -e --arg env "${{ inputs.target-app-env }}" 'contains([$env])' > /dev/null; then
            echo "Error: target-app-env '${{ inputs.target-app-env }}' is not in valid environments: $VALID_APP_ENVS"
            exit 1
          fi

      - name: Validate target-env
        if: ${{ steps.read-envs.outputs.environments != null }}
        run: |
          VALID_ENVS='${{ steps.read-envs.outputs.environments }}'
          if ! echo "$VALID_ENVS" | jq -e --arg env "${{ inputs.target-env }}" 'contains([$env])' > /dev/null; then
            echo "Error: target-env '${{ inputs.target-env }}' is not in valid environments: $VALID_ENVS"
            exit 1
          fi

      - name: Validate clients
        if: ${{ steps.read-clients.outputs.clients != null }}
        run: |
          VALID_CLIENTS='${{ steps.read-clients.outputs.clients }}'
          if ! echo "$VALID_CLIENTS" | jq -e --arg env "${{ inputs.client }}" 'contains([$env])' > /dev/null; then
            echo "Error: client '${{ inputs.client }}' is not in valid clients: $VALID_CLIENTS"
            exit 1
          fi

      - name: Validate supported versions
        if: ${{ steps.read-supported-versions.outputs.supported_versions != null }}
        run: |
          SUPPORTED_VERSIONS='${{ steps.read-supported-versions.outputs.supported_versions }}'
          if ! echo "$SUPPORTED_VERSIONS" | jq -e --arg env "${{ inputs.service_version }}" 'contains([$env])' > /dev/null; then
            echo "Error: version '${{ inputs.service_version }}' is not a supported version: $SUPPORTED_VERSIONS"
            exit 1
          fi

      - name: Validate supported versions
        if: ${{ steps.read-odoo_base_tags.outputs.odoo_base_tags != null }}
        run: |
          ODOO_BASE_TAGS='${{ steps.read-odoo_base_tags.outputs.odoo_base_tags }}'
          if ! echo "$ODOO_BASE_TAGS" | jq -e --arg env "${{ inputs.service_version }}" 'contains([$env])' > /dev/null; then
            echo "Error: tag '${{ inputs.odoo_base_tag }}' is not a supported odoo base tag: $ODOO_BASE_TAGS"
            exit 1
          fi